### Successfull test: ensure json-content, not null response and correct status code.
GET {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", `Expected 'application/json' but received '${type}'`);
    });

    client.test("Response is not null", function () {
        client.assert(response.body.length != null, "Response has no items");
    });
%}

### Successfull test: get correct stick by id, ensure json-content and correct status code.
GET {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Accept: application/json

> {%
    client.test("Correct status code is returned", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", `Expected 'application/json' but received '${type}'`);
    });

    client.test("Correct stick returned", function () {
        client.assert(typeof response.body === "object" && response.body !== null, "Response is not an object");
        client.assert(response.body.id === 1, "Mismatched stick id");
    });
%}

### Failed test: get stick by invalid id
GET {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/100
Accept: application/json

> {%
    client.test("404 status confirmed for invalid stick", function () {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}

### Successfull test: get bids for stick by id
GET {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1/bids
Accept: application/json

> {%
    client.test("Bids are returned for correct stick", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", `Expected 'application/json' but received '${type}'`);
    });

    client.test("Bids are not null", function () {
        client.assert(response.body.length != null, "Response has no items");
    });
%}

### Failed test: get bids for stick by invalid id
GET {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/100/bids
Accept: application/json

> {%
    client.test("404 status confirmed for invalid stick", function () {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}


### Successfull test: post a new stick
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Stick created successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### Failed test: post a new stick with invalid name
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "   ",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}
> {%
    client.test("Name invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid description
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": null,
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Description invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid startingPrice
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": -100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Estimated price invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid length
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "invalid",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Length invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid feature
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "invalid",
  "weight": "light",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Feature invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid weight
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "invalid",
  "startDate": null,
  "endDate": "2024-12-31"
}

> {%
    client.test("Weight invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Failed test: post a new stick with invalid endDate (obsolete date)
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "2023-12-31"
}

> {%
    client.test("End date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: post a new stick with invalid endDate (invalid format)
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": null,
  "endDate": "bomboclat_date"
}

> {%
    client.test("End date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: post a new stick with invalid startDate (bigger than end date)
POST {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "Magic Wand",
  "description": "A powerful wand for casting spells.",
  "startingPrice": 100,
  "image": "",
  "length": "medium",
  "feature": "straight",
  "weight": "light",
  "startDate": "2025-12-31",
  "endDate": "2024-12-31"
}

> {%
    client.test("Start date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}


### Successfull test: update stick by id
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "startingPrice": 100
}

> {%
    client.test("Stick updated successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    })
%}

### Failed test: update stick by id with invalid starting price
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "startingPrice": -100
}

> {%
    client.test("Estimated price invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect start date (higher than end date)
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "startDate": "2025-12-31"
}

> {%
    client.test("Start date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}


### Failed test: update stick with incorrect end date (lower than start date)
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "endDate": "2023-12-31"
}

> {%
    client.test("End date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect end date (invalid format)
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "endDate": "bomboclat_date"
}

> {%
    client.test("End date invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect name
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "name": "   "
}

> {%
    client.test("Name invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect description
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "description": null
}

> {%
    client.test("Description invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect length
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "length": "invalid"
}

> {%
    client.test("Length invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect feature
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "feature": "invalid"
}

> {%
    client.test("Feature invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Failed test: update stick with incorrect weight
PATCH {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "weight": "invalid"
}

> {%
    client.test("Weight invalidated and server returns error", function () {
        client.assert(response.status === 400, "Response status is not 400");
    })
%}

### Successfull test: delete stick by id
DELETE {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/4
Authorization: Bearer {{admin_token}}

> {%
    client.test("Stick deleted successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    })
%}

### Failed test: delete stick by invalid id
DELETE {{protocol}}//{{host}}:{{port}}/{{default_path}}/sticks/100
Authorization: Bearer {{admin_token}}

> {%
    client.test("404 status confirmed for invalid stick", function () {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}